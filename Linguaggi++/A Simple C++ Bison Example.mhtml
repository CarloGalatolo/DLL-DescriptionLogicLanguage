From: <Saved by Blink>
Snapshot-Content-Location: https://www.gnu.org/software/bison/manual/html_node/A-Simple-C_002b_002b-Example.html
Subject: A Simple C++ Example (Bison 3.7.1)
Date: Mon, 9 Nov 2020 16:54:17 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--sVwJACWznmRBpe0TZmunMc3FqnWkPv7llu2ucOOz3s----"


------MultipartBoundary--sVwJACWznmRBpe0TZmunMc3FqnWkPv7llu2ucOOz3s----
Content-Type: text/html
Content-ID: <frame-A24E7563A9926026DEA0FAD9350C9156@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.gnu.org/software/bison/manual/html_node/A-Simple-C_002b_002b-Example.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><html><!--=20
This manual (28 July 2020) is for GNU Bison (version 3.7.1),
the GNU parser generator.

Copyright (C) 1988-1993, 1995, 1998-2015, 2018-2020 Free
Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, with the Front-Cover texts being "A GNU Manual," and with the
Back-Cover Texts as in (a) below.  A copy of the license is included in the
section entitled "GNU Free Documentation License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and modify
this GNU manual.  Buying copies from the FSF supports it in developing GNU
and promoting software freedom." --><!-- Created by GNU Texinfo 6.7, http:/=
/www.gnu.org/software/texinfo/ --><head><meta http-equiv=3D"Content-Type" c=
ontent=3D"text/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text=
/css" href=3D"cid:css-be157279-0bc1-4f3c-8e55-f4a9466b37f5@mhtml.blink" />

<title>A Simple C++ Example (Bison 3.7.1)</title>

<meta name=3D"description" content=3D"A Simple C++ Example (Bison 3.7.1)">
<meta name=3D"keywords" content=3D"A Simple C++ Example (Bison 3.7.1)">
<meta name=3D"resource-type" content=3D"document">
<meta name=3D"distribution" content=3D"global">
<meta name=3D"Generator" content=3D"makeinfo">
<link href=3D"https://www.gnu.org/software/bison/manual/html_node/index.htm=
l" rel=3D"start" title=3D"Top">
<link href=3D"https://www.gnu.org/software/bison/manual/html_node/Index-of-=
Terms.html" rel=3D"index" title=3D"Index of Terms">
<link href=3D"https://www.gnu.org/software/bison/manual/html_node/index.htm=
l#SEC_Contents" rel=3D"contents" title=3D"Table of Contents">
<link href=3D"https://www.gnu.org/software/bison/manual/html_node/C_002b_00=
2b-Parsers.html" rel=3D"up" title=3D"C++ Parsers">
<link href=3D"https://www.gnu.org/software/bison/manual/html_node/C_002b_00=
2b-Bison-Interface.html" rel=3D"next" title=3D"C++ Bison Interface">
<link href=3D"https://www.gnu.org/software/bison/manual/html_node/C_002b_00=
2b-Parsers.html" rel=3D"prev" title=3D"C++ Parsers">

<link rel=3D"stylesheet" type=3D"text/css" href=3D"https://www.gnu.org/soft=
ware/gnulib/manual.css">


</head>

<body lang=3D"en" data-new-gr-c-s-check-loaded=3D"14.983.0">
<span id=3D"A-Simple-C_002b_002b-Example"></span><div class=3D"header">
<p>
Next: <a href=3D"https://www.gnu.org/software/bison/manual/html_node/C_002b=
_002b-Bison-Interface.html" accesskey=3D"n" rel=3D"next">C++ Bison Interfac=
e</a>, Up: <a href=3D"https://www.gnu.org/software/bison/manual/html_node/C=
_002b_002b-Parsers.html" accesskey=3D"u" rel=3D"up">C++ Parsers</a> &nbsp; =
[<a href=3D"https://www.gnu.org/software/bison/manual/html_node/index.html#=
SEC_Contents" title=3D"Table of contents" rel=3D"contents">Contents</a>][<a=
 href=3D"https://www.gnu.org/software/bison/manual/html_node/Index-of-Terms=
.html" title=3D"Index" rel=3D"index">Index</a>]</p>
</div>
<hr>
<span id=3D"A-Simple-C_002b_002b-Example-1"></span><h4 class=3D"subsection"=
>10.1.1 A Simple C++ Example</h4>

<p>This tutorial about C++ parsers is based on a simple, self contained
example.  The following sections are the reference manual for Bison with
C++, the last one showing a fully blown example (see section <a href=3D"htt=
ps://www.gnu.org/software/bison/manual/html_node/A-Complete-C_002b_002b-Exa=
mple.html">A Complete C++ Example</a>).
</p>
<p>To look nicer, our example will be in C++14.  It is not required: Bison
supports the original C++98 standard.
</p>
<p>A Bison file has three parts.  In the first part, the prologue, we start=
 by
making sure we run a version of Bison which is recent enough, and that we
generate C++.
</p>

<div class=3D"example">
<pre class=3D"example">%require "3.2"
%language "c++"
</pre></div>

<p>Let=E2=80=99s dive directly into the middle part: the grammar.  Our inpu=
t is a
simple list of strings, that we display once the parsing is done.
</p>
<div class=3D"example">
<pre class=3D"example">%%
</pre><pre class=3D"example">result:
  list  { std::cout &lt;&lt; $1 &lt;&lt; '\n'; }
;
</pre><pre class=3D"example">
%nterm &lt;std::vector&lt;std::string&gt;&gt; list;
</pre><pre class=3D"example">list:
  %empty     { /* Generates an empty string list */ }
| list item  { $$ =3D $1; $$.push_back ($2); }
;
</pre></div>

<p>We used a vector of strings as a semantic value!  To use genuine C++ obj=
ects
as semantic values=E2=80=94not just PODs=E2=80=94we cannot rely on the unio=
n that Bison
uses by default to store them, we need <em>variants</em> (see section <a hr=
ef=3D"https://www.gnu.org/software/bison/manual/html_node/C_002b_002b-Varia=
nts.html">C++ Variants</a>):
</p>
<div class=3D"example">
<pre class=3D"example">%define api.value.type variant
</pre></div>

<p>Obviously, the rule for <code>result</code> needs to print a vector of s=
trings.
In the prologue, we add:
</p>
<div class=3D"example">
<pre class=3D"example">%code
{
  // Print a list of strings.
  auto
  operator&lt;&lt; (std::ostream&amp; o, const std::vector&lt;std::string&g=
t;&amp; ss)
    -&gt; std::ostream&amp;
  {
    o &lt;&lt; '{';
    const char *sep =3D "";
</pre><pre class=3D"example">    for (const auto&amp; s: ss)
      {
        o &lt;&lt; sep &lt;&lt; s;
        sep =3D ", ";
      }
</pre><pre class=3D"example">    return o &lt;&lt; '}';
  }
}
</pre></div>

<p>You may want to move it into the <code>yy</code> namespace to avoid leak=
ing it in
your default namespace.  We recommend that you keep the actions simple, and
move details into auxiliary functions, as we did with <code>operator&lt;&lt=
;</code>.
</p>
<p>Our list of strings will be built from two types of items: numbers and
strings:
</p>
<div class=3D"example">
<pre class=3D"example">%nterm &lt;std::string&gt; item;
%token &lt;std::string&gt; TEXT;
%token &lt;int&gt; NUMBER;
</pre><pre class=3D"example">item:
  TEXT
| NUMBER  { $$ =3D std::to_string ($1); }
;
</pre></div>

<p>In the case of <code>TEXT</code>, the implicit default action applies: <=
code>$$&nbsp;=3D&nbsp;$1</code>.<!-- /@w -->
</p>
<br>

<p>Our scanner deserves some attention.  The traditional interface of
<code>yylex</code> is not type safe: since the token kind and the token val=
ue are
not correlated, you may return a <code>NUMBER</code> with a string as seman=
tic
value.  To avoid this, we use <em>token constructors</em> (see section <a h=
ref=3D"https://www.gnu.org/software/bison/manual/html_node/Complete-Symbols=
.html">Complete Symbols</a>).  This directive:
</p>
<div class=3D"example">
<pre class=3D"example">%define api.token.constructor
</pre></div>

<p>requests that Bison generates the functions <code>make_TEXT</code> and
<code>make_NUMBER</code>, but also <code>make_YYEOF</code>, for the end of =
input.
</p>
<p>Everything is in place for our scanner:
</p>
<div class=3D"example">
<pre class=3D"example">%code
{
  namespace yy
  {
    // Return the next token.
    auto yylex () -&gt; parser::symbol_type
    {
      static int count =3D 0;
      switch (int stage =3D count++)
        {
</pre><pre class=3D"example">        case 0:
          return parser::make_TEXT ("I have three numbers for you.");
</pre><pre class=3D"example">        case 1: case 2: case 3:
          return parser::make_NUMBER (stage);
</pre><pre class=3D"example">        case 4:
          return parser::make_TEXT ("And that's all!");
</pre><pre class=3D"example">        default:
          return parser::make_YYEOF ();
</pre><pre class=3D"example">        }
    }
  }
}
</pre></div>

<p>In the epilogue, the third part of a Bison grammar file, we leave simple
details: the error reporting function, and the main function.
</p>
<div class=3D"example">
<pre class=3D"example">%%
namespace yy
{
  // Report an error to the user.
  auto parser::error (const std::string&amp; msg) -&gt; void
  {
    std::cerr &lt;&lt; msg &lt;&lt; '\n';
  }
}

int main ()
{
  yy::parser parse;
  return parse ();
}
</pre></div>

<p>Compile, and run!
</p>
<div class=3D"example">
<pre class=3D"example">$ <kbd>bison simple.yy -o simple.cc</kbd>
$ <kbd>g++ -std=3Dc++14 simple.cc -o simple</kbd>
</pre><pre class=3D"example">$ <kbd>./simple</kbd>
{I have three numbers for you., 1, 2, 3, And that's all!}
</pre></div>

<hr>
<div class=3D"header">
<p>
Next: <a href=3D"https://www.gnu.org/software/bison/manual/html_node/C_002b=
_002b-Bison-Interface.html" accesskey=3D"n" rel=3D"next">C++ Bison Interfac=
e</a>, Up: <a href=3D"https://www.gnu.org/software/bison/manual/html_node/C=
_002b_002b-Parsers.html" accesskey=3D"u" rel=3D"up">C++ Parsers</a> &nbsp; =
[<a href=3D"https://www.gnu.org/software/bison/manual/html_node/index.html#=
SEC_Contents" title=3D"Table of contents" rel=3D"contents">Contents</a>][<a=
 href=3D"https://www.gnu.org/software/bison/manual/html_node/Index-of-Terms=
.html" title=3D"Index" rel=3D"index">Index</a>]</p>
</div>





</body></html>
------MultipartBoundary--sVwJACWznmRBpe0TZmunMc3FqnWkPv7llu2ucOOz3s----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-be157279-0bc1-4f3c-8e55-f4a9466b37f5@mhtml.blink

@charset "utf-8";

a.summary-letter { text-decoration: none; }

blockquote.indentedblock { margin-right: 0em; }

div.display { margin-left: 3.2em; }

div.example { margin-left: 3.2em; }

div.lisp { margin-left: 3.2em; }

kbd { font-style: oblique; }

pre.display { font-family: inherit; }

pre.format { font-family: inherit; }

pre.menu-comment { font-family: serif; }

pre.menu-preformatted { font-family: serif; }

span.nolinebreak { white-space: nowrap; }

span.roman { font-family: initial; font-weight: normal; }

span.sansserif { font-family: sans-serif; font-weight: normal; }

ul.no-bullet { list-style: none; }
------MultipartBoundary--sVwJACWznmRBpe0TZmunMc3FqnWkPv7llu2ucOOz3s----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.gnu.org/software/gnulib/manual.css

@charset "utf-8";

@import url("/style.css");

blockquote { font-style: normal; border-left: 10px solid red; padding-left:=
 2.5%; margin-left: 0px; }

p, pre, li, dt, dd, table, code, address { line-height: 1.5em; }

var { font-style: italic; }

div.lisp { padding: 0.8em 1.2em 0.4em; }

pre.lisp { padding: 0.8em 1.2em; }

div.lisp, pre.lisp { margin: 1em 0px 1em 3%; border-radius: 0.3em; border: =
1px solid rgb(212, 203, 182); background-color: rgb(242, 239, 228); }

div.lisp > pre.lisp { padding: 0px 0px 0.4em; margin: 0px; border: none; }

dd p, li p { margin-left: 0px; margin-right: 0px; }

a { text-decoration: none; outline-style: none; }

a:hover { text-decoration: underline; }

body { box-shadow: 0px 0px 0px 0px; max-width: 55em; }
------MultipartBoundary--sVwJACWznmRBpe0TZmunMc3FqnWkPv7llu2ucOOz3s----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.gnu.org/style.css

@charset "utf-8";

@import url("/reset.css");

html, body { font-size: 1em; text-align: left; text-decoration: none; }

html { background-color: rgb(231, 231, 231); }

body { max-width: 74.92em; margin: 0px auto; padding: 0.5em 1em 1em; backgr=
ound-color: white; border: 0.1em solid rgb(192, 192, 192); }

p, pre, li, dt, dd, table, code, address { line-height: 1.3em; }

h1 { font-size: 2em; margin: 1em 0px; }

h2 { font-size: 1.5em; margin: 1em 0px 0.87em; }

h3 { font-size: 1.3em; margin: 1em 0px 0.87em; }

h4 { font-size: 1.13em; margin: 1em 0px 0.88em; }

h5 { font-size: 1em; margin: 1em 0px; }

p, pre { margin: 1em 0px; }

pre { overflow: auto; padding-bottom: 0.3em; }

ul, ol, blockquote { margin-left: 1.5%; margin-right: 1.5%; }

hr { margin: 1em 0px; }

ul li { margin: 0.5em 1em; }

ol li { margin: 1em; }

ol ul li { margin: 0.5em 1em; }

ul li p, ul ul li { margin-top: 0.3em; margin-bottom: 0.3em; }

ul ul, ol ul { margin-top: 0px; margin-bottom: 0px; }

dl { margin: 1em 0px 0px; }

dt { margin: 0.5em 0px; }

dd { margin: 0.5em 3% 1em; }

dd p { margin: 0.5em 0px; }

table { display: block; overflow: auto; margin-top: 1.5em; margin-bottom: 1=
.5em; }

th { padding: 0.3em 0.5em; text-align: center; }

td { padding: 0.2em 0.5em; }

address { margin-bottom: 1em; }

caption { margin-bottom: 0.5em; text-align: center; }

sup { vertical-align: super; }

sub { vertical-align: sub; }

h1, h2, h3, h4, h5, h6, strong, dt, th { font-weight: bold; }

h1, h2, h3, h4 { color: rgb(51, 51, 51); }

h5, h6, dt { color: rgb(34, 34, 34); }

a[href] { color: rgb(0, 80, 144); }

a[href]:visited { color: rgb(16, 0, 112); }

a[href]:active, a[href]:hover { color: rgb(16, 0, 112); text-decoration: no=
ne; }

h1 a[href]:visited, h2 a[href]:visited, h3 a[href]:visited, h4 a[href]:visi=
ted { color: rgb(0, 80, 144); }

h1 a[href]:hover, h2 a[href]:hover, h3 a[href]:hover, h4 a[href]:hover { co=
lor: rgb(16, 0, 112); }

ol { list-style: outside decimal; }

ul { list-style: outside square; }

ul ul, ol ul { list-style: circle; }

li { list-style: inherit; }

hr { background-color: rgb(237, 230, 213); }

table { border: 0px; }

abbr, acronym { border-bottom: 1px dotted rgb(0, 0, 0); text-decoration: no=
ne; cursor: help; }

del { text-decoration: line-through; }

em { font-style: italic; }

small { font-size: 0.9em; }

img { max-width: 100%; }

.center, .c { text-align: center; }

.nocenter { text-align: left; }

.underline { text-decoration: underline; }

.nounderline { text-decoration: none; }

.no-bullet { list-style: none; }

.inline-list li { display: inline; }

.netscape4, .no-display { display: none; }

.contents ul, .shortcontents ul { font-weight: bold; }

.contents ul ul, .shortcontents ul ul { font-weight: normal; }

.contents ul { list-style: none; }

.header, .node { margin: 0px -1em; padding: 0px 1em; }

.header p, .node p { line-height: 2em; }

.node a, .header a { display: inline-block; line-height: 2em; }

.node a:hover, .header a:hover { background: rgb(242, 239, 228); }

table.cartouche td { padding: 1.5em; }

div.display, div.lisp, div.smalldisplay, div.smallexample, div.smalllisp { =
margin-left: 3%; }

div.example { padding: 0.8em 1.2em 0.4em; }

pre.example { padding: 0.8em 1.2em; }

div.example, pre.example { margin: 1em 0px 1em 3%; border-radius: 0.3em; bo=
rder: 1px solid rgb(212, 203, 182); background-color: rgb(242, 239, 228); }

div.example > pre.example { padding: 0px 0px 0.4em; margin: 0px; border: no=
ne; }

pre.menu-comment { padding-top: 1.3em; margin: 0px; }

@media (min-width: 40em) {
  body { padding: 0.5em 3em 1em; }
  div.header, div.node { margin: 0px -3em; padding: 0px 3em; }
}
------MultipartBoundary--sVwJACWznmRBpe0TZmunMc3FqnWkPv7llu2ucOOz3s----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.gnu.org/reset.css

@charset "utf-8";

html { color: rgb(0, 0, 0); background: rgb(255, 255, 255); }

body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, code, form,=
 fieldset, legend, input, button, textarea, p, blockquote, th, td { margin:=
 0px; padding: 0px; }

table { border-collapse: collapse; border-spacing: 0px; }

fieldset, img { border: 0px; }

address, caption, cite, code, dfn, em, strong, th, var, optgroup { font-sty=
le: inherit; font-weight: inherit; }

del, ins { text-decoration: none; }

li { list-style: none; }

caption, th { text-align: left; }

h1, h2, h3, h4, h5, h6 { font-size: 100%; font-weight: normal; }

q::before, q::after { content: ""; }

abbr, acronym { border: 0px; font-variant: normal; }

sup { vertical-align: baseline; }

sub { vertical-align: baseline; }

legend { color: rgb(0, 0, 0); }

input, button, textarea, select, optgroup, option { font-family: inherit; f=
ont-size: inherit; font-style: inherit; font-weight: inherit; }

input, button, textarea, select { }
------MultipartBoundary--sVwJACWznmRBpe0TZmunMc3FqnWkPv7llu2ucOOz3s------
